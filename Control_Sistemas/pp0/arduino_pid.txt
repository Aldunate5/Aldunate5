// Codigo de ejemplo ICM2813 2020-2
// Sistema en lazo abierto

// IMPORTAR librearias
#include <Servo.h>

// Definición de PINs
#define encoder0PinA  2
#define encoder0PinB  3
#define PIN_PWM_MOTOR 6
#define intervalo 5000000

// Variables Motor
Servo motor;
float PWMmotor   = 0.0;
float PWMdriver  = 0.0;
float referencia = 50;

//Variables control
float rpm_ref = 100; //rpm que se desean obtener al inicio
float Kp = 0.3;//0.1
float Ki = 0.01;
float Kd = 0.1;


//Inicializando constantes
float error = 0;
float err_anterior = 0;
float error_acum = 0;
float error_speed = 0;
int paso = 6.33; //1048/360°=8.73

// Variables Tiempo
unsigned long time;
unsigned long time_ant = 0;
float dt = 0.02;


// Variables de los Encoders y posicion
volatile long encoder0Pos = 0;
long enc0;
long enc0_ant = 0;
float vel0;
int posicion = 0;
int posicion_aux=0;

//-----------------------------------
// CONFIGURACION
void setup()
{
  // Configurar Encoders
  motor.attach(PIN_PWM_MOTOR);

  pinMode(encoder0PinA, INPUT_PULLUP);
  pinMode(encoder0PinB, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encoder0PinA), doEncoder0A, CHANGE);  // encoder PIN A
  attachInterrupt(digitalPinToInterrupt(encoder0PinB), doEncoder0B, CHANGE);  // encoder PIN B

  // Configurar Serial port
  Serial.begin(115200);           //Inicializar el puerto serial (Monitor Serial)
  Serial.println("Comenzando...");
  delay(500);
}
//-----------------------------------
// CONFIGURANDO INTERRUPCIONES
void doEncoder0A()
{
  if (digitalRead(encoder0PinA) == digitalRead(encoder0PinB)) {
    encoder0Pos++;
  } else {
    encoder0Pos--;
  }
}
void doEncoder0B()
{
  if (digitalRead(encoder0PinA) == digitalRead(encoder0PinB)) {
    encoder0Pos--;
  } else {
    encoder0Pos++;
  }
}


//-----------------------------------
// LOOP PRINCIPAL
void loop() {
  time = micros();

if ((time - time_ant)>20000)
{
  // Actualizando Informacion del encoder
  enc0 = encoder0Pos;

  //-----------------------------------
  // Ejemplo variable alterando cada 5 segundos
  if ((time / intervalo) % 2)
    referencia = 0.0;
  else
    referencia = 90.0;

  //-----------------------------------
  // Calculando Posicion del motor
  posicion=(enc0/paso);


  // Calculando Velocidad del motor
  float rpm = 28500;
  vel0 = (float)(enc0 - enc0_ant) * rpm / (time - time_ant); //RPM
  enc0_ant = enc0;

  //Error
  error = posicion_aux-referencia;
  error_acum = error_acum + error;


  // Lazo abierto (entrada en escalon directo a la entrada de la planta)
  //PWMmotor = referencia;

  // Bang-Bang
/*
  if (error>2)
  {
    PWMmotor = -2;
  }
  else if(error<2)
  {
    PWMmotor = 2;
  }
  else
  {
    PWMmotor = 0;
  }
*/

  //Proporcional
  /*
  if (error>2)
  {
    PWMmotor = -2 - (Kp*error);
  }
  else if(error<2)
  {
    PWMmotor = 2 - (Kp*error);
  }
  else
  {
    PWMmotor = 0 - (Kp*error);
  }
  */
  //PID
  if (error>2)
  {
    PWMmotor = -2 - ((Kp*error)+(-Kd*vel0)+(Ki*error_acum));
  }
  else if(error<2)
  {
    PWMmotor = 2 - ((Kp*error)+(-Kd*vel0)+(Ki*error_acum));
  }
  else
  {
    PWMmotor = 0 - ((Kp*error)+(-Kd*vel0)+(Ki*error_acum));
  }

  //Auxiliar de posicion
  posicion_aux=posicion;
  // --------------------------------------------

  // El resto del código no es necesario de modificar
  // Motor Voltage Driver (Puente H):
  // Utilizar el siguienet código para mover el motor según variable
  // PWMmotor entre +/-90.
  PWMdriver = constrain(90 + PWMmotor, 0, 180);
  motor.write(PWMdriver); // 0-90 atras, 90 detenido, 90-180 adelante

  // Reportar datos
  if(1) // Hacer 0 para guardar datos (1 para ver el gráfico)
  {
    Serial.print(posicion);
    Serial.print(", ");
    Serial.print(vel0);
    Serial.print(", ");
    Serial.print(PWMmotor);
    Serial.println("");
  }
  else
  {
    Serial.println(posicion);
  }

  time_ant = time;

  // Retardo para mejorar rendimiento de Tinkercad
  delay(14);
}
  // Retardo para mejorar rendimiento de Tinkercad
  delay(1);
}