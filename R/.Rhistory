a<-1
b<-1
c<--1
ls() #see objects
sol1<-(-b+sqrt(b^2-4*a*c))/(2*a)
sol2<-(-b-sqrt(b^2-4*a*c))/(2*a)
data(murders)
library(dslabs)
data(murders)
class(murders)
str(murders)
head(murders) #
head(murders) #
murders
name<-names(murders)
length(name)
class(name)
estado<-murders$state
length(estado)
class(estado)
class(murders$region)
levels(murders$region)
region<-murders$region
value<-murders$population
region<-reorder(region,value, FUN = sum)
levels(region)
class(murders) #define el tipo
record
mat<-matrix(1:12,4,3)
mat
mat[2,3]
mat[3,3]
mat[,3]
mat[,2:3]
mat[1:2,2:3]
as.data.frame(mat)
mat$V1
data(murders)
data(murders)
murders(2,3)
View(murders)
murders(25,1)
murders[25,1]
murders[2,3]
murders[3,3]
murders[3,4]
murders[1,1]
murders[1,4]
codes->c(380,240,120)
codes -> c(380,240,120)
a<-1
b<-1
c<--1
codes <- c(a,b,c)
country<- ("italia"=a,"chile"-b,"latvia"=c)
country<- ("italia"=a,"chile"-b,"latvia"=c)
country<- ("italia"=a, "chile"-b, "latvia"=c)
country<- c("italia"=a, "chile"-b, "latvia"=c)
country<- c("italia"=a, "chile"=b, "latvia"=c)
country
names(country)
names(country)<-codes
args(seq)
seq(1,10,0,5)
seq(1,10,0.5)
country(c(1,3))
country<- c("italia"=a, "chile"=b, "latvia"=c)
country(c(1,3))
country[c(1,3)]
class(country)
x<-c(180,"pais",230)
class(x)
x
y<-as.character(x)
as.character(y)
x<-1:10
y<-as.character(x)
as.character(y)
as.numeric(y)
x<-c(180,"pais",230) #coerced: asume elementos de vector del mismo tipo
y<-as.character(x)
as.numeric(y)
x<-1:10
y<-as.character(x)
as.numeric(y)
x<-c("1",b,"3")
x<-c("1","b","3")
as.numeric(x)
y<-as.numeric(x)
################ sort ##################
x<-c(31,4,89,10,5)
sort(x)
order(x)
index<-order(x) #numera elementos en orden de la secuencia
murders$state
index<-order(murders$total)
murders$state[index]
murders$state[index][1:5]
murders$abb[index][1:5] #ordeno acorde a indice
max(murders$total)
which.max(murders$total)
murders$total
rank(x)
#################vector operation###############3
vector<-c(23,5,7,30,29)
vector*3
vector-30
murders$total/murders$population
murders$population
murders$total/murders$population*10^5
murders$state[order(rate)][1:5]
rate<-murders$total/murders$population*10^5
murders$state[order(rate)][1:5]
rate<0.71
ind<-rate<0.71
murders$state[ind]
sum(ind)
east<-murders$region=="West"
safe<-rate<1
ind<-east & safe
murders$state[ind]
east<-murders$region=="East"
murders$state[ind]
ind<-east & safe
murders$state[ind]
murder$region
murders$region
south<-murders$region=="South"
safe<-rate<1
ind<-south & safe
murders$state[ind]
safe<-rate<3
ind<-south & safe
murders$state[ind]
safe<-rate<1
ind<-south & safe
murders$state[ind]
West<-murders$region=="West"
safe<-rate<1
ind<-west & safe
murders$state[ind]
west<-murders$region=="West"
safe<-rate<1
ind<-west & safe
murders$state[ind]
ind<-which(murders$state=="California")
rate[ind]
ind<-match(c(murders$state=="California","Texas"),murders$state)
rate[ind]
ind<-match(c("California","Texas"),murders$state)
rate[ind]
############## plots ##################3
x<-murders$population / 10^6
y<-murders$total
args(plot)
plot(x,y)
z<-with(murders,rate)
hist(x)
hist(z)
boxplot(murders)
boxplot(z,murders)
boxplot(z,data=murders)
boxplot(region~region,data=murders)
boxplot(z,data=murders)
rate<-with(murders,total/population*100000)
boxplot(z,data=murders)
boxplot(region~rate,data=murders)
murders$rate<-with(murders,total/population*100000)
boxplot(region~rate,data=murders)
x<- matrix(1:120,12,10)
image(x)
library(dslabs)
data("murders")
murders_rate<-murders$total/murders$population*10^6
ind<-which.min(murders_rate)
if(murders_rate[ind]<0.5){
print(murders$state[ind])
}else{
print("No state present death rate that low")
}
if(murders_rate[ind]<0.5){
print(murders$state[ind])
}else{
print("No state present death rate that low")
}
murders_rate<-murders$total/murders$population*10^5
ind<-which.min(murders_rate)
if(murders_rate[ind]<0.5){
print(murders$state[ind])
}else{
print("No state present death rate that low")
}
if(murders_rate[ind]<0.5){
print(murders$state[ind])
}
if(murders_rate[ind]<0.5){
print(murders$state[ind])
}else{
print("No state present death rate that low")
}
if(murders_rate[ind]<0.25){
print(murders$state[ind])
}else{
print("No state present death rate that low")
}
ifelse(a>0,1/a,NA)
a <- 0
ifelse(a>0,1/a,NA)
a<-c(0,1,2,-4,5)
result<-ifelse(a>0,1/a,NA)
data("na_example")
data("na_example")
no_nas<- ifelse(is.na(na_example),0,na_example)
sum(is.na(no_nas))
z<-c(TRUE,TRUE,FALSE)
any(z)
all(z) #True if all are True
s/n
########### functions ##############
avg<-function(x){
s<-sum(x)
n<-length(x)
s/n
}
x<-1:100
avg(x)
identical(mean(x),avg(x))
######### Namespaces ####### funciones dentro de distintos packages cumplen distintas funciones con mismo nombre
search()
library(dslabs)
data("murders")
murders_rate<-murders$total/murders$population*10^5
ind<-which.min(murders_rate)
if(murders_rate[ind]<0.25){
print(murders$state[ind])
}else{
print("No state present death rate that low")
}
a <- 0
ifelse(a>0,1/a,NA)
a<-c(0,1,2,-4,5)
result<-ifelse(a>0,1/a,NA)
data("na_example")
sum(is.na(no_nas))
z<-c(TRUE,TRUE,FALSE)
all(z) #True if all are True
no_nas<- ifelse(is.na(na_example),0,na_example)
########### functions ##############
avg<-function(x){ #variables dentro de funciones no se guardan en workspaces
s<-sum(x)
n<-length(x)
s/n #entrega valor a retornar
}
x<-1:100
any(z) #True if any entry is True
avg(x)
identical(mean(x),avg(x))
compute_s_n<-function(n){
x<-1:n
sum(x)
}
a=compute_s_n(25)
print(a)
s_n=vector(length=m)
a=compute_s_n(25)
m<-25
s_n=vector(length=m) #empty vector largo m
for (n in 1:m){
s_n[n]<-compute_s_n(n)
}
type(s_n)
class(s_n)
print(s_n)
n<-1:m
plot(n,s_n)
####### vectorization ##########
x<-1:10
y<-1:10
sqrt(x)
x*y
sapply(x, sqrt)
z<-matrix(1:12,3,4)
sapply(z,sqrt)
print(z)
z1<-sapply(z,sqrt)
print(z1)
z1<-mapply(z,sqrt)
z1<-lapply(z,sqrt)
print(z1)
library(tidyverse)
library(dslabs)
murders
co2
packages("Tidiverse")
packages("tidyverse")
install.packages(tidyverse)
install.packages("tidyverse")
murders
library(tidyverse)
library(dslabs)
library(dslabs)
library(dplyr)
murders<-mutate(murders, rate=total/population *10^5) #mutate adds column to data frame
murders
data("murders")
filter(murders, rate<=0.71) #subsetting from data frame
rlang::last_error()
filter(murders, rate<=0.71)
murders
murders<-mutate(murders, rate=total/population *10^5) #mutate adds column to data frame
murders
filter(murders, rate<=0.71)
new_table<-select(murders,state,region,rate)
filter(new_table,rate<=0.71)
select(murders,state,population) %>% head()
filter(murders,state=="New York")
filter(murders,state!="Florida")
library(tidyverse)
library(dslabs)
library(dplyr)
murders<-mutate(murders, rate=total/population *10^5) #mutate adds column to data frame
murders
new_table<-select(murders,state,region,rate)
filter(new_table,rate<=0.71)
select(murders,state,population) %>% head()
filter(murders,state=="New York")
filter(murders,state!="Florida")
murders %<% select(state,region,rate) %<% filter(rate<=0.71)
murders %>% select(state,region,rate) %>% filter(rate<=0.71)
16 %>% sqrt()
16 %>% sqrt() %>% log2()
data("heights")
heights
s<-heights %>% filter(sex=="Male") %>%
summarise(average=mean(height), s.d=sd(height))
s
heights %>% filter(sex=="Male") %>%
summarise(median=median(height), minimum=min(height),maximum=max(height)) #define new "table" as summary of information
us_murder_rate
us_murder_rate <- murders%>% summarise(rate=sum(total)/sum(population)*10^5)
class(us_murder_rate)
us_murder_rate <- murders%>% summarise(rate=sum(total)/sum(population)*10^5) %>% pull(rate)
class(us_murder_rate)
heights%>% group_by(sex)
heights%>% group_by(sex) %>% summarise(average=mean(height),s.d=sd(heights))
heights%>% group_by(sex) %>% summarise(average=mean(height),sd=sd(heights))
heights%>% group_by(sex) %>% summarise(average=mean(height))
heights%>% group_by(sex) %>% summarise(average=mean(height),standard_deviation=sd(height))
murders %>% arrange(population) %>% head()
murders %>% arrange(state) %>% head() #arranges by "popuation", ascendente por default arrange(desc())
murders %>% arrange(region,rate) %>% head()
rates<-filter(murders,region="South") %>% mutate(rate=total/population*10^5) %>% .$rate
rates<-filter(murders, region=="South") %>% mutate(rate=total/population*10^5) %>% .$rate
rates
region$South
filter(murders,region=="South")
rates<-filter(murders, region=="South") %>% mutate(rate=total/population*10^5) %>% .$total
rates
rates<-filter(murders, region=="South") %>% mutate(rate=total/population*10^5) %>% .$rate
rates
filter(murders,region=="South")
my_summary<-function(dat){
x<-quantile(dat$height,c(0,0.5,1))
tibble(min = x[1],med=x[2],max=x[3])
}
heights %>% group_by(sex) %>% do(my_summary(.))
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
n <- 1:25
s_n <- sapply(n, compute_s_n)
library(purrr)
s_n<-map(m,compute_s_n)
s_n<-map(n,compute_s_n)
class(s_n)
s_n<-map_dbl(n,compute_s_n)
class(s_n)
s_n<-map_df(n,compute_s_n) #tibble
murders %>%
mutate(group = case_when(
abb %in% c("ME", "NH", "VT", "MA", "RI", "CT") ~ "New England",
abb %in% c("WA", "OR", "CA") ~ "West Coast",
region == "South" ~ "South",
TRUE ~ "Other")) %>%
group_by(group) %>%
summarize(rate = sum(total) / sum(population) * 10^5)
x<-5
a<-3
b<-7
between(x,a,b)
filename<-"murders.csv"
dir<-system.file("extdata",package = "dslabs")
fullpath<-file.path(dir,filename)
file.copy(fullpath,"murders.csv")
library(tidyverse)
dat<-read_csv(filename)
dir<-system.file(package = "dslabs")
list.files(path=dir)
wd<-getwd()
filename %ini% list.files(file.path(dir,"extdata"))
filename %in% list.files(file.path(dir,"extdata"))
list.files()
new_wd<-file.path(wd,"Diego_Aldunate\R")
setwd(wd + "Diego_Aldunate\R")
setwd(wd + "Diego_Aldunate/R")
setwd("C:/Users/diego/Documents/Diego_Aldunate/R")
getwd()
file.copy(fullpath,"murders.csv") #busca base murders y lo pega para luego importarlo
read_lines("murders.csv",n_max = 3)
dat<-read_csv(filename)
excel_sheets
files<-list.files(path)
path<-system.file("extdata",package = "dslabs")
files<-list.files(path)
files
help("read_csv")
names(dat)
readLines(dat)
fullpath<-file.path(files,"olive.csv")
dat2<-read.csv(fullpath)
names(dat)
names(dat2)
dat2<-read.csv(fullpath)
fullpath<-file.path(files,"olive.csv")
files
dat2<-read.csv("olive.csv")
files
fullpath<-file.path(files,file)
archivo<-"olive.csv"
fullpath<-file.path(files,archivo)
dat2<-read.csv("olive.csv")
file.copy(fullpath,"olive.csv")
url <- "https://raw.githubusercontent.com/rafalab/dslabs/master/inst/extdata/murders.csv"
dat3<-read_csv(url)
download.file(url,"murders.csv")
class(dat)
path
fullpath<-file.path(dir,filename)
x<-scan(file.path(fullpath,"murders.csv"))
x<-scan(file.path(fullpath)
filename<-"murders.csv"
path<-system.file("extdata",package = "dslabs")
filename<-"murders.csv"
filename2<-"olive.csv"
x<-scan(file.path(path,filename)
x<-scan(file.path(path,filename))
x<-scan(file.path(path,filename),sep = ",", what = "c")
x[1:10]
file.copy(path,":olive.csv")
fullpath1<-file.path(path,filename)
fullpath2<-file.path(path,filename2)
file.copy(fullpath2,":olive.csv")
getwd()
files
file.copy(fullpath2,"olive.csv")
